if (label) {
out_inds <- which(cooksd < min(threshold))
lm_matrix[out_inds, "rowname"] <- rep("", length(out_inds))
ordered_lm_matrix <-
lm_matrix[order(lm_matrix$.cooksd, decreasing = TRUE),]
for(i in 1:nrow(ordered_lm_matrix)){
if(i <= n_labels_desired){ordered_lm_matrix[i,]$rowname <-
ordered_lm_matrix[i,]$rowname}
else{ordered_lm_matrix[i,]$rowname <- ""}
}
lm_matrix <-
ordered_lm_matrix[order(as.numeric(row.names(ordered_lm_matrix))), ]
base_plot = base_plot +
ggplot2::geom_text(label = lm_matrix[, "rowname"], color = "black",
aes(y = cooksd*1.20))
print((max_cook+0.05)/2)
}
if (show.threshold) {
base_plot <- base_plot +
ggplot2::geom_hline(yintercept = threshold, linetype = "dashed")
}
return(base_plot)
}
cooks(car_lm, n_labels_desired = 3)
cooks <-
function(fitted.lm, label = TRUE, show.threshold = FALSE, threshold = "convention", scale.factor = 0.5,
n_labels_desired = NULL)
{
if ("lm" %in% class(fitted.lm) == FALSE) {
stop("Not a valid regression model.
Make sure object is created either via `glm`, lm` or `aov`")
}
# obtain linear model matrix
lm_matrix <- broom::augment(fitted.lm) %>%
as.data.frame()
lm_matrix[, "rowname"] <- 1:nrow(lm_matrix)
# threshold for outlier
cooksd = lm_matrix[, ".cooksd"]
n = nrow(lm_matrix)
if(is.null(n_labels_desired)){
n_labels_desired <- n
} else{n_labels_desired <- n_labels_desired}
# compute the threshold value for cook's distance plot
if (threshold == "matlab") {
threshold = mean(cooksd) * 3
}
else if (threshold == "baseR") {
threshold = c(0.5, 1)
}
else if (threshold == "convention") {
threshold = c(4/n, 1)
}
else {
stop("invalid threshold specified for cooks")
}
# window limit
limit = max(cooksd, na.rm = T)
margin_factor = 5
margin = round(limit / margin_factor)
max_cook = limit + margin
.cooksd <- NULL
base_plot <- (ggplot2::ggplot(fitted.lm, aes(1:nrow(lm_matrix), .cooksd, ymin = 0, ymax = cooksd)) +
ggplot2::geom_point(size = scale.factor) +
ggplot2::geom_linerange(size = scale.factor) +
ggplot2::xlab("Observation Number") +
ggplot2::ylab("Cook's Distance") +
ggplot2::ylim(0, max_cook+0.05)) +
ggplot2::theme_bw()
# labelling of potential outliers
if (label) {
out_inds <- which(cooksd < min(threshold))
lm_matrix[out_inds, "rowname"] <- rep("", length(out_inds))
ordered_lm_matrix <-
lm_matrix[order(lm_matrix$.cooksd, decreasing = TRUE),]
for(i in 1:nrow(ordered_lm_matrix)){
if(i <= n_labels_desired){ordered_lm_matrix[i,]$rowname <-
ordered_lm_matrix[i,]$rowname}
else{ordered_lm_matrix[i,]$rowname <- ""}
}
lm_matrix <-
ordered_lm_matrix[order(as.numeric(row.names(ordered_lm_matrix))), ]
base_plot = base_plot +
ggplot2::geom_text(label = lm_matrix[, "rowname"], color = "black",
aes(y = cooksd*1.1))
print((max_cook+0.05)/2)
}
if (show.threshold) {
base_plot <- base_plot +
ggplot2::geom_hline(yintercept = threshold, linetype = "dashed")
}
return(base_plot)
}
cooks(car_lm, n_labels_desired = 3)
cooks <-
function(fitted.lm, label = TRUE, show.threshold = FALSE, threshold = "convention", scale.factor = 0.5,
n_labels_desired = NULL)
{
if ("lm" %in% class(fitted.lm) == FALSE) {
stop("Not a valid regression model.
Make sure object is created either via `glm`, lm` or `aov`")
}
# obtain linear model matrix
lm_matrix <- broom::augment(fitted.lm) %>%
as.data.frame()
lm_matrix[, "rowname"] <- 1:nrow(lm_matrix)
# threshold for outlier
cooksd = lm_matrix[, ".cooksd"]
n = nrow(lm_matrix)
if(is.null(n_labels_desired)){
n_labels_desired <- n
} else{n_labels_desired <- n_labels_desired}
# compute the threshold value for cook's distance plot
if (threshold == "matlab") {
threshold = mean(cooksd) * 3
}
else if (threshold == "baseR") {
threshold = c(0.5, 1)
}
else if (threshold == "convention") {
threshold = c(4/n, 1)
}
else {
stop("invalid threshold specified for cooks")
}
# window limit
limit = max(cooksd, na.rm = T)
margin_factor = 5
margin = round(limit / margin_factor)
max_cook = limit + margin
.cooksd <- NULL
base_plot <- (ggplot2::ggplot(fitted.lm, aes(1:nrow(lm_matrix), .cooksd, ymin = 0, ymax = cooksd)) +
ggplot2::geom_point(size = scale.factor) +
ggplot2::geom_linerange(size = scale.factor) +
ggplot2::xlab("Observation Number") +
ggplot2::ylab("Cook's Distance") +
ggplot2::ylim(0, max_cook+0.05)) +
ggplot2::theme_bw()
# labelling of potential outliers
if (label) {
out_inds <- which(cooksd < min(threshold))
lm_matrix[out_inds, "rowname"] <- rep("", length(out_inds))
ordered_lm_matrix <-
lm_matrix[order(lm_matrix$.cooksd, decreasing = TRUE),]
for(i in 1:nrow(ordered_lm_matrix)){
if(i <= n_labels_desired){ordered_lm_matrix[i,]$rowname <-
ordered_lm_matrix[i,]$rowname}
else{ordered_lm_matrix[i,]$rowname <- ""}
}
lm_matrix <-
ordered_lm_matrix[order(as.numeric(row.names(ordered_lm_matrix))), ]
base_plot = base_plot +
ggplot2::geom_text(label = lm_matrix[, "rowname"], color = "black",
aes(y = cooksd*1.01))
print((max_cook+0.05)/2)
}
if (show.threshold) {
base_plot <- base_plot +
ggplot2::geom_hline(yintercept = threshold, linetype = "dashed")
}
return(base_plot)
}
cooks(car_lm, n_labels_desired = 3)
cooks <-
function(fitted.lm, label = TRUE, show.threshold = FALSE, threshold = "convention", scale.factor = 0.5,
n_labels_desired = NULL)
{
if ("lm" %in% class(fitted.lm) == FALSE) {
stop("Not a valid regression model.
Make sure object is created either via `glm`, lm` or `aov`")
}
# obtain linear model matrix
lm_matrix <- broom::augment(fitted.lm) %>%
as.data.frame()
lm_matrix[, "rowname"] <- 1:nrow(lm_matrix)
# threshold for outlier
cooksd = lm_matrix[, ".cooksd"]
n = nrow(lm_matrix)
if(is.null(n_labels_desired)){
n_labels_desired <- n
} else{n_labels_desired <- n_labels_desired}
# compute the threshold value for cook's distance plot
if (threshold == "matlab") {
threshold = mean(cooksd) * 3
}
else if (threshold == "baseR") {
threshold = c(0.5, 1)
}
else if (threshold == "convention") {
threshold = c(4/n, 1)
}
else {
stop("invalid threshold specified for cooks")
}
# window limit
limit = max(cooksd, na.rm = T)
margin_factor = 5
margin = round(limit / margin_factor)
max_cook = limit + margin
.cooksd <- NULL
base_plot <- (ggplot2::ggplot(fitted.lm, aes(1:nrow(lm_matrix), .cooksd, ymin = 0, ymax = cooksd)) +
ggplot2::geom_point(size = scale.factor) +
ggplot2::geom_linerange(size = scale.factor) +
ggplot2::xlab("Observation Number") +
ggplot2::ylab("Cook's Distance") +
ggplot2::ylim(0, max_cook+0.05)) +
ggplot2::theme_bw()
# labelling of potential outliers
if (label) {
out_inds <- which(cooksd < min(threshold))
lm_matrix[out_inds, "rowname"] <- rep("", length(out_inds))
ordered_lm_matrix <-
lm_matrix[order(lm_matrix$.cooksd, decreasing = TRUE),]
for(i in 1:nrow(ordered_lm_matrix)){
if(i <= n_labels_desired){ordered_lm_matrix[i,]$rowname <-
ordered_lm_matrix[i,]$rowname}
else{ordered_lm_matrix[i,]$rowname <- ""}
}
lm_matrix <-
ordered_lm_matrix[order(as.numeric(row.names(ordered_lm_matrix))), ]
base_plot = base_plot +
ggplot2::geom_text(label = lm_matrix[, "rowname"], color = "black",
aes(y = ifelse(cooksd < max_cook, cooksd*1.20, cooksd)))
print((max_cook+0.05)/2)
}
if (show.threshold) {
base_plot <- base_plot +
ggplot2::geom_hline(yintercept = threshold, linetype = "dashed")
}
return(base_plot)
}
cooks(car_lm, n_labels_desired = 3)
cooks <-
function(fitted.lm, label = TRUE, show.threshold = FALSE, threshold = "convention", scale.factor = 0.5,
n_labels_desired = NULL)
{
if ("lm" %in% class(fitted.lm) == FALSE) {
stop("Not a valid regression model.
Make sure object is created either via `glm`, lm` or `aov`")
}
# obtain linear model matrix
lm_matrix <- broom::augment(fitted.lm) %>%
as.data.frame()
lm_matrix[, "rowname"] <- 1:nrow(lm_matrix)
# threshold for outlier
cooksd = lm_matrix[, ".cooksd"]
n = nrow(lm_matrix)
if(is.null(n_labels_desired)){
n_labels_desired <- n
} else{n_labels_desired <- n_labels_desired}
# compute the threshold value for cook's distance plot
if (threshold == "matlab") {
threshold = mean(cooksd) * 3
}
else if (threshold == "baseR") {
threshold = c(0.5, 1)
}
else if (threshold == "convention") {
threshold = c(4/n, 1)
}
else {
stop("invalid threshold specified for cooks")
}
# window limit
limit = max(cooksd, na.rm = T)
margin_factor = 5
margin = round(limit / margin_factor)
max_cook = limit + margin
.cooksd <- NULL
base_plot <- (ggplot2::ggplot(fitted.lm, aes(1:nrow(lm_matrix), .cooksd, ymin = 0, ymax = cooksd)) +
ggplot2::geom_point(size = scale.factor) +
ggplot2::geom_linerange(size = scale.factor) +
ggplot2::xlab("Observation Number") +
ggplot2::ylab("Cook's Distance") +
ggplot2::ylim(0, max_cook+0.05)) +
ggplot2::theme_bw()
# labelling of potential outliers
if (label) {
out_inds <- which(cooksd < min(threshold))
lm_matrix[out_inds, "rowname"] <- rep("", length(out_inds))
ordered_lm_matrix <-
lm_matrix[order(lm_matrix$.cooksd, decreasing = TRUE),]
for(i in 1:nrow(ordered_lm_matrix)){
if(i <= n_labels_desired){ordered_lm_matrix[i,]$rowname <-
ordered_lm_matrix[i,]$rowname}
else{ordered_lm_matrix[i,]$rowname <- ""}
}
lm_matrix <-
ordered_lm_matrix[order(as.numeric(row.names(ordered_lm_matrix))), ]
base_plot = base_plot +
ggplot2::geom_text(label = lm_matrix[, "rowname"], color = "black",
aes(y = ifelse(cooksd*1.20 < max_cook, cooksd*1.20, cooksd)))
print((max_cook+0.05)/2)
}
if (show.threshold) {
base_plot <- base_plot +
ggplot2::geom_hline(yintercept = threshold, linetype = "dashed")
}
return(base_plot)
}
cooks(car_lm, n_labels_desired = 3)
cooks(bad_lm, n_labels_desired = 3)
cooks <-
function(fitted.lm, label = TRUE, show.threshold = FALSE, threshold = "convention", scale.factor = 0.5,
n_labels_desired = NULL, label_height_nudge = 0)
{
if ("lm" %in% class(fitted.lm) == FALSE) {
stop("Not a valid regression model.
Make sure object is created either via `glm`, lm` or `aov`")
}
# obtain linear model matrix
lm_matrix <- broom::augment(fitted.lm) %>%
as.data.frame()
lm_matrix[, "rowname"] <- 1:nrow(lm_matrix)
# threshold for outlier
cooksd = lm_matrix[, ".cooksd"]
n = nrow(lm_matrix)
if(is.null(n_labels_desired)){
n_labels_desired <- n
} else{n_labels_desired <- n_labels_desired}
# compute the threshold value for cook's distance plot
if (threshold == "matlab") {
threshold = mean(cooksd) * 3
}
else if (threshold == "baseR") {
threshold = c(0.5, 1)
}
else if (threshold == "convention") {
threshold = c(4/n, 1)
}
else {
stop("invalid threshold specified for cooks")
}
# window limit
limit = max(cooksd, na.rm = T)
margin_factor = 5
margin = round(limit / margin_factor)
max_cook = limit + margin
.cooksd <- NULL
base_plot <- (ggplot2::ggplot(fitted.lm, aes(1:nrow(lm_matrix), .cooksd, ymin = 0, ymax = cooksd)) +
ggplot2::geom_point(size = scale.factor) +
ggplot2::geom_linerange(size = scale.factor) +
ggplot2::xlab("Observation Number") +
ggplot2::ylab("Cook's Distance") +
ggplot2::ylim(0, max_cook+0.05)) +
ggplot2::theme_bw()
# labelling of potential outliers
if (label) {
out_inds <- which(cooksd < min(threshold))
lm_matrix[out_inds, "rowname"] <- rep("", length(out_inds))
ordered_lm_matrix <-
lm_matrix[order(lm_matrix$.cooksd, decreasing = TRUE),]
for(i in 1:nrow(ordered_lm_matrix)){
if(i <= n_labels_desired){ordered_lm_matrix[i,]$rowname <-
ordered_lm_matrix[i,]$rowname}
else{ordered_lm_matrix[i,]$rowname <- ""}
}
lm_matrix <-
ordered_lm_matrix[order(as.numeric(row.names(ordered_lm_matrix))), ]
base_plot = base_plot +
ggplot2::geom_text(label = lm_matrix[, "rowname"], color = "black",
aes(y = ifelse(cooksd+label_height_nudge < max_cook,
cooksd+label_height_nudge, cooksd)))
}
if (show.threshold) {
base_plot <- base_plot +
ggplot2::geom_hline(yintercept = threshold, linetype = "dashed")
}
return(base_plot)
}
cooks(bad_lm, n_labels_desired = 3)
cooks(bad_lm, n_labels_desired = 3, label_height_nudge = 0.1)
cooks(bad_lm, n_labels_desired = 3, label_height_nudge = 0.01)
cooks <-
function(fitted.lm, label = TRUE, show.threshold = FALSE, threshold = "convention", scale.factor = 0.5,
n_labels_desired = NULL, label_height_nudge = 0)
{
if ("lm" %in% class(fitted.lm) == FALSE) {
stop("Not a valid regression model.
Make sure object is created either via `glm`, lm` or `aov`")
}
# obtain linear model matrix
lm_matrix <- broom::augment(fitted.lm) %>%
as.data.frame()
lm_matrix[, "rowname"] <- 1:nrow(lm_matrix)
# threshold for outlier
cooksd = lm_matrix[, ".cooksd"]
n = nrow(lm_matrix)
if(is.null(n_labels_desired)){
n_labels_desired <- n
} else{n_labels_desired <- n_labels_desired}
# compute the threshold value for cook's distance plot
if (threshold == "matlab") {
threshold = mean(cooksd) * 3
}
else if (threshold == "baseR") {
threshold = c(0.5, 1)
}
else if (threshold == "convention") {
threshold = c(4/n, 1)
}
else {
stop("invalid threshold specified for cooks")
}
# window limit
limit = max(cooksd, na.rm = T)
margin_factor = 5
margin = round(limit / margin_factor)
max_cook = limit + margin
.cooksd <- NULL
base_plot <- (ggplot2::ggplot(fitted.lm, aes(1:nrow(lm_matrix), .cooksd, ymin = 0, ymax = cooksd)) +
ggplot2::geom_point(size = scale.factor) +
ggplot2::geom_linerange(size = scale.factor) +
ggplot2::xlab("Observation Number") +
ggplot2::ylab("Cook's Distance") +
ggplot2::ylim(0, max_cook+0.05)) +
ggplot2::theme_bw()
# labelling of potential outliers
if (label) {
out_inds <- which(cooksd < min(threshold))
lm_matrix[out_inds, "rowname"] <- rep("", length(out_inds))
ordered_lm_matrix <-
lm_matrix[order(lm_matrix$.cooksd, decreasing = TRUE),]
for(i in 1:nrow(ordered_lm_matrix)){
if(i <= n_labels_desired){ordered_lm_matrix[i,]$rowname <-
ordered_lm_matrix[i,]$rowname}
else{ordered_lm_matrix[i,]$rowname <- ""}
}
lm_matrix <-
ordered_lm_matrix[order(as.numeric(row.names(ordered_lm_matrix))), ]
base_plot = base_plot +
ggplot2::geom_text(label = lm_matrix[, "rowname"], color = "black",
aes(y = ifelse(cooksd+label_height_nudge < max_cook+0.05,
cooksd+label_height_nudge, cooksd)))
}
if (show.threshold) {
base_plot <- base_plot +
ggplot2::geom_hline(yintercept = threshold, linetype = "dashed")
}
return(base_plot)
}
cooks(bad_lm, n_labels_desired = 3, label_height_nudge = 0.01)
cooks <-
function(fitted.lm, label = TRUE, show.threshold = FALSE, threshold = "convention", scale.factor = 0.5,
n_labels_desired = NULL, label_height_nudge = 0)
{
if ("lm" %in% class(fitted.lm) == FALSE) {
stop("Not a valid regression model.
Make sure object is created either via `glm`, lm` or `aov`")
}
# obtain linear model matrix
lm_matrix <- broom::augment(fitted.lm) %>%
as.data.frame()
lm_matrix[, "rowname"] <- 1:nrow(lm_matrix)
# threshold for outlier
cooksd = lm_matrix[, ".cooksd"]
n = nrow(lm_matrix)
if(is.null(n_labels_desired)){
n_labels_desired <- n
} else{n_labels_desired <- n_labels_desired}
# compute the threshold value for cook's distance plot
if (threshold == "matlab") {
threshold = mean(cooksd) * 3
}
else if (threshold == "baseR") {
threshold = c(0.5, 1)
}
else if (threshold == "convention") {
threshold = c(4/n, 1)
}
else {
stop("invalid threshold specified for cooks")
}
# window limit
limit = max(cooksd, na.rm = T)
margin_factor = 5
margin = round(limit / margin_factor)
max_cook = limit + margin
.cooksd <- NULL
base_plot <- (ggplot2::ggplot(fitted.lm, aes(1:nrow(lm_matrix), .cooksd, ymin = 0, ymax = cooksd)) +
ggplot2::geom_point(size = scale.factor) +
ggplot2::geom_linerange(size = scale.factor) +
ggplot2::xlab("Observation Number") +
ggplot2::ylab("Cook's Distance") +
ggplot2::ylim(0, max_cook+0.05)) +
ggplot2::theme_bw()
# labelling of potential outliers
if (label) {
out_inds <- which(cooksd < min(threshold))
lm_matrix[out_inds, "rowname"] <- rep("", length(out_inds))
ordered_lm_matrix <-
lm_matrix[order(lm_matrix$.cooksd, decreasing = TRUE),]
for(i in 1:nrow(ordered_lm_matrix)){
if(i <= n_labels_desired){ordered_lm_matrix[i,]$rowname <-
ordered_lm_matrix[i,]$rowname}
else{ordered_lm_matrix[i,]$rowname <- ""}
}
lm_matrix <-
ordered_lm_matrix[order(as.numeric(row.names(ordered_lm_matrix))), ]
base_plot = base_plot +
ggplot2::geom_text(label = lm_matrix[, "rowname"], color = "black",
aes(y = ifelse(cooksd+label_height_nudge < max_cook+0.05,
cooksd+label_height_nudge, cooksd)))
}
if (show.threshold) {
base_plot <- base_plot +
ggplot2::geom_hline(yintercept = threshold, linetype = "dashed")
}
return(base_plot)
}
cooks(bad_lm, n_labels_desired = 3, label_height_nudge = 0.01)
cooks(bad_lm, n_labels_desired = 3, label_height_nudge = 0.1)
roxygen2::roxygenise(clean=TRUE)
